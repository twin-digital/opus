features:
  - name: eslint
    actions:
      - action: write-file
        options:
          file: eslint.config.js
          content: |
            import base from '@twin-digital/eslint-config'

            export default base

      - action: json-merge-patch
        options:
          file: package.json
          patch: |
            scripts:
              lint: null
              lint:eslint: eslint --no-error-on-unmatched-pattern src
              lint:packagejson: prettier-package-json --list-different
              lint:prettier: prettier --check --ignore-path ../../../.gitignore .
              lint:fix: null
              lint:fix:eslint: eslint --no-error-on-unmatched-pattern --fix src
              lint:fix:packagejson: prettier-package-json --write ./package.json
              lint:fix:prettier: prettier --write --ignore-path ../../../.gitignore .
            devDependencies:
              '@eslint/js': 'catalog:'
              '@twin-digital/eslint-config': workspace:*
              eslint: 'catalog:'
              eslint-config-prettier: 'catalog:'
              globals: 'catalog:'
              prettier: 'catalog:'
              prettier-package-json: 'catalog:'
              typescript-eslint: 'catalog:'
  - name: package-manifest
    actions:
      # if project has source files...
      - name: Add files entries
        action: json-patch
        conditions:
          - exists: src/*
        options:
          file: package.json
          patch: |
            - opx: appendIfMissing
              path: /files
              value: dist
            - opx: appendIfMissing
              path: /files
              value: "!dist/**/*.d.ts.map"
      - name: Add esm exports
        action: json-merge-patch
        conditions:
          - exists: src/**/index.ts
        options:
          file: package.json
          patch: |
            exports:
              .:
                import:
                  types: ./dist/index.d.ts
                  import: ./dist/index.js
              ./*:
                import:
                  types: ./dist/*/index.d.ts
                  import: ./dist/*/index.js
      - name: Add cjs exports
        action: json-merge-patch
        conditions:
          - exists: tsconfig.cjs.json
        options:
          file: package.json
          patch: |
            exports:
              .:
                require:
                  types: ./dist/cjs/index.d.ts
                  require: ./dist/cjs/index.js
              ./*:
                require:
                  types: ./dist/cjs/*/index.d.ts
                  require: ./dist/cjs/*/index.js
      - name: Remove unnecessary cjs exports
        action: json-merge-patch
        conditions:
          - notExists: tsconfig.cjs.json
        options:
          file: package.json
          patch: |
            exports:
              .:
                require: null
              ./*:
                require: null
      # if project does not have source files...
      - name: Remove files entries
        action: json-patch
        conditions:
          - notExists: src/*
        options:
          file: package.json
          patch: |
            - opx: removeValue
              path: /files
              value: dist
            - opx: removeValue
              path: /files
              value: '!dist/**/*.d.ts.map'
      - name: Remove exports
        action: json-merge-patch
        conditions:
          - notExists: src/**/index.ts
        options:
          file: package.json
          patch: |
            exports:
              .: null
              ./*: null
  - name: assets
    conditions:
      - exists: assets/*
    actions:
      - name: Add scripts and dependencies
        action: json-merge-patch
        options:
          file: package.json
          patch: |
            scripts:
              _:build:copy-assets: rsync -a --mkpath assets/ dist/assets
              _:watch:copy-assets: chokidar 'assets/**/*' -c "rsync -a --delete assets/ dist/assets/"
            devDependencies:
              chokidar-cli: ^3.0.0
      - name: Add scripts for cjs support
        conditions:
          - exists: tsconfig.cjs.json
        action: json-merge-patch
        options:
          file: package.json
          patch: |
            scripts:
              _:build:copy-assets:cjs: rsync -a --mkpath assets/ dist/cjs/assets
              _:watch:copy-assets:cjs: chokidar 'assets/**/*' -c "rsync -a --delete assets/ dist/cjs/assets/"
      - name: Remove unnecessary scripts for cjs support
        conditions:
          - notExists: tsconfig.cjs.json
        action: json-merge-patch
        options:
          file: package.json
          patch: |
            scripts:
              _:build:copy-assets:cjs: null
              _:watch:copy-assets:cjs: null
  - name: typescript
    actions:
      - name: Create tsconfig file
        action: write-file
        conditions:
          - notExists: tsconfig.options.json
        options:
          file: tsconfig.json
          content: |
            {
              "extends": ["@twin-digital/tsconfig/tsconfig.build.json"]
            }
      - name: Create tsconfig file with custom options
        action: write-file
        conditions:
          - exists: tsconfig.options.json
        options:
          file: tsconfig.json
          content: |
            {
              "extends": [
                "@twin-digital/tsconfig/tsconfig.build.json",
                "./tsconfig.options.json"
              ]
            }
      - name: Add scripts and dependencies
        action: json-merge-patch
        options:
          file: package.json
          patch: |
            scripts:
              _:build:typescript: tsc
              _:watch:typescript: pnpm run _:build:typescript --watch
              typecheck: tsc --noEmit
            devDependencies:
              typescript: 'catalog:'
              '@types/node': '22.x'
      - name: Add scrpts for cjs support
        action: json-merge-patch
        conditions:
          - exists: tsconfig.cjs.json
        options:
          file: package.json
          patch: |
            scripts:
              _:build:typescript:cjs: tsc --project tsconfig.cjs.json && [ -d dist/cjs ] && printf '%s' '{\"type\":\"commonjs\"}' > dist/cjs/package.json
              _:watch:typescript:cjs: pnpm run _:build:typescript:cjs --watch
      - name: Remove unnecessary scripts for cjs support
        action: json-merge-patch
        conditions:
          - notExists: tsconfig.cjs.json
        options:
          file: package.json
          patch: |
            scripts:
              _:build:typescript:cjs: null
              _:watch:typescript:cjs: null
  - name: clean
    actions:
      - name: Add script
        action: json-merge-patch
        options:
          file: package.json
          patch: |
            scripts:
              clean: rm -rf dist
